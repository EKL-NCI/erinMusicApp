/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package musicapplication;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author erink
 */
public class musicGUI extends javax.swing.JFrame {
    private Playlist likedSongs;
    private List<Playlist> playlistsByGenre;
    /**
     * Creates new form musicGUI
     */
    public musicGUI() {
        likedSongs = new Playlist();
        playlistsByGenre = new ArrayList<>();
        initComponents();
        likedDisplay.setEditable(false);
        playlistDisplay.setEditable(false);
    }

    private String getGenreName(int index) {
        return "Genre" + (index + 1);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        textOut = new javax.swing.JTextArea();
        genreTxt = new javax.swing.JTextField();
        nameTxt = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        sgenreLbl = new javax.swing.JLabel();
        sNameLbl = new javax.swing.JLabel();
        moveBtn = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();
        removeAllBtn = new javax.swing.JButton();
        songCountBtn = new javax.swing.JButton();
        likedPlLbl = new javax.swing.JLabel();
        playlistLbl = new javax.swing.JLabel();
        shuffleBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        displayBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        likedDisplay = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        playlistDisplay = new javax.swing.JTextArea();
        artistTxt = new javax.swing.JTextField();
        artistLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));

        textOut.setColumns(20);
        textOut.setRows(5);
        jScrollPane4.setViewportView(textOut);

        nameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTxtActionPerformed(evt);
            }
        });

        addBtn.setText("Add Song");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        sgenreLbl.setForeground(new java.awt.Color(0, 0, 0));
        sgenreLbl.setText("Genre");

        sNameLbl.setForeground(new java.awt.Color(0, 0, 0));
        sNameLbl.setText("Name");

        moveBtn.setText("Move Last");
        moveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBtnActionPerformed(evt);
            }
        });

        removeBtn.setText("Remove Last");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        removeAllBtn.setText("Remove All");
        removeAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllBtnActionPerformed(evt);
            }
        });

        songCountBtn.setText("Number of Songs");
        songCountBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songCountBtnActionPerformed(evt);
            }
        });

        likedPlLbl.setForeground(new java.awt.Color(0, 0, 0));
        likedPlLbl.setText("Liked Songs");

        playlistLbl.setForeground(new java.awt.Color(0, 0, 0));
        playlistLbl.setText("Playlists");

        shuffleBtn.setText("Shuffle");

        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Music Manager");

        displayBtn.setText("Display");
        displayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayBtnActionPerformed(evt);
            }
        });

        likedDisplay.setColumns(20);
        likedDisplay.setRows(5);
        jScrollPane1.setViewportView(likedDisplay);

        playlistDisplay.setColumns(20);
        playlistDisplay.setRows(5);
        jScrollPane2.setViewportView(playlistDisplay);

        artistLbl.setForeground(new java.awt.Color(0, 0, 0));
        artistLbl.setText("Artist");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(songCountBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(removeAllBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(removeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(66, 66, 66)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(sNameLbl)
                                        .addGap(18, 18, 18)
                                        .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(sgenreLbl)
                                            .addComponent(artistLbl))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(artistTxt)
                                            .addComponent(genreTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addBtn)))
                        .addGap(42, 42, 42))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(likedPlLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(playlistLbl)
                            .addComponent(jLabel1))
                        .addGap(344, 344, 344))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(displayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(moveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(shuffleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(likedPlLbl)
                    .addComponent(playlistLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sNameLbl))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(genreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sgenreLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(artistTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(artistLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addBtn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(displayBtn)
                            .addComponent(moveBtn)
                            .addComponent(shuffleBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(songCountBtn)
                            .addComponent(removeAllBtn)
                            .addComponent(removeBtn))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTxtActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // TODO add your handling code here:
        // Collect inputs from text fields
        String title = nameTxt.getText();
        String artist = artistTxt.getText();
        String genre = genreTxt.getText();
        
        // Check if all text fields are NOT empty and create "newSong" which is added to likedSongs doubleLinkedList
        if (!title.isEmpty() && !artist.isEmpty() && !genre.isEmpty()) {
            Song newSong = new Song(title, artist, genre);
            likedSongs.add(likedSongs.size() + 1, newSong);
            nameTxt.setText("");
            artistTxt.setText("");
            genreTxt.setText("");
            likedDisplay.append("Song added: " + newSong.toString()+ "\n");
        } else { // If any field is empty user prompted
            JOptionPane.showMessageDialog(this, "Please enter all fields.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void displayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayBtnActionPerformed
        // TODO add your handling code here:
        if(likedSongs.isEmpty()){
            likedDisplay.setText("There are no Liked Songs to Display" + "\n");
        }else{
            // Create a StringBuilder to build the entire display content for liked songs
            StringBuilder stringBuilder = new StringBuilder();
            
            // Iterate over liked songs and append to StringBuilder
            for (int i = 1; i <= likedSongs.size(); i++) {
                stringBuilder.append(likedSongs.get(i)).append("\n");
            }
            likedDisplay.setText("Liked Songs:\n" + stringBuilder.toString());
        }

        // Create a StringBuilder to build the entire display content for playlists
        StringBuilder stringBuilder = new StringBuilder();

        // Iterate over each genre Playlist
        for (int i = 0; i < playlistsByGenre.size(); i++) {
            String genre = getGenreName(i);
            Playlist myPlaylist = playlistsByGenre.get(i);

            // Append the label for the current genre Playlist
            stringBuilder.append("Playlist for genre '").append(genre).append("':\n");

            // Append the songs in the current Playlist to the StringBuilder
            for (int j = 1; j <= myPlaylist.size(); j++) {
                stringBuilder.append(myPlaylist.get(j)).append("\n");
            }

            // Add a newline to separate playlists
            stringBuilder.append("\n");
        }

        // Set the entire content to the displayArea
        playlistDisplay.setText(stringBuilder.toString());
    }//GEN-LAST:event_displayBtnActionPerformed

    private void songCountBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songCountBtnActionPerformed
        // TODO add your handling code here:
        textOut.append("Playlist size:" + likedSongs.size()+ "\n");
    }//GEN-LAST:event_songCountBtnActionPerformed

    private void removeAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllBtnActionPerformed
        // TODO add your handling code here:
        // Check if likedSongs has an item and if so, clear likedSongs
        if (likedSongs.size() > 0) {
            likedSongs.clear();
            textOut.append("All entries removed from Liked Songs." + "\n");
            likedDisplay.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "Liked Songs is empty.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_removeAllBtnActionPerformed

    private void moveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBtnActionPerformed
        // TODO add your handling code here:
        // If likedSongs has an item, get last item and get genre to be sorted
        if (likedSongs.size() > 0) {
            Song lastSong = likedSongs.get(likedSongs.size());
            String genre = lastSong.getGenre();
            Playlist genrePlaylist = null;

            // Check if a Playlist for the genre already exists
            for (Playlist myPlaylist : playlistsByGenre) {
                if (myPlaylist.get(1).getGenre().equals(genre)) {
                    genrePlaylist = myPlaylist;
                    break;
                }
            }

            // If Playlist does not exist, create a new one
            if (genrePlaylist == null) {
                genrePlaylist = new Playlist();
                playlistsByGenre.add(genrePlaylist);
            }

            // Add the last song to the Playlist
            genrePlaylist.add(genrePlaylist.size() + 1, lastSong);
            likedSongs.remove(likedSongs.size()); // Remove the last song from likedSongs
            textOut.append("Genre playlist populated with the last song entered from Liked Songs." + "\n");
        } else {
            JOptionPane.showMessageDialog(this, "Liked Songs is empty.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_moveBtnActionPerformed

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        // TODO add your handling code here:
        // Check if likedSongs has an item and remove last entry
        if (likedSongs.size() > 0) {
            likedSongs.remove(likedSongs.size());
            textOut.setText("Last entry removed from Liked Songs.");
        } else {
            JOptionPane.showMessageDialog(this, "Liked Songs is empty.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_removeBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(musicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(musicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(musicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(musicGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new musicGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JLabel artistLbl;
    private javax.swing.JTextField artistTxt;
    private javax.swing.JButton displayBtn;
    private javax.swing.JTextField genreTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea likedDisplay;
    private javax.swing.JLabel likedPlLbl;
    private javax.swing.JButton moveBtn;
    private javax.swing.JTextField nameTxt;
    private javax.swing.JTextArea playlistDisplay;
    private javax.swing.JLabel playlistLbl;
    private javax.swing.JButton removeAllBtn;
    private javax.swing.JButton removeBtn;
    private javax.swing.JLabel sNameLbl;
    private javax.swing.JLabel sgenreLbl;
    private javax.swing.JButton shuffleBtn;
    private javax.swing.JButton songCountBtn;
    private javax.swing.JTextArea textOut;
    // End of variables declaration//GEN-END:variables
}
